types:
  imports:
    Safe:
      external:
        java: com.palantir.logsafe.Safe
  definitions:
    default-package: com.palantir.conjure
    objects:
      EmptyFields:
        fields:
          optional: optional<integer>
          list: list<integer>
          set: set<integer>
          map: map<integer, integer>
      TestEnum:
        values:
          - ONE
          - value: TWO
            deprecated: Don't use me!
      TestUnion:
        union:
          integer: integer
          double: double
          string: string
          object:
            type: TestObject
            deprecated: Don't use me!
      TestObject:
        fields:
          foo:
            type: integer
            deprecated: Don't use me!
      IntegerAlias:
        alias: integer
      DoubleAlias:
        alias: double
      BooleanAlias:
        alias: boolean
      OptionalAlias:
        alias: optional<integer>
      OptionalAliasAlias:
        alias: OptionalAlias
      ListAlias:
        alias: list<integer>
      ListAliasAlias:
        alias: ListAlias
      SetAlias:
        alias: set<integer>
      SetAliasAlias:
        alias: SetAlias
      MapAlias:
        alias: map<integer, integer>
      ObjectAlias:
        alias: TestObject
      UnionAlias:
        alias: TestUnion
      OptionalObjectAlias:
        alias: optional<TestObject>
      BinaryAlias:
        alias: binary
      SafeStringAlias:
        alias: string
        safety: safe
      UnsafeStringAlias:
        alias: string
        safety: unsafe
      TransparentAliases:
        fields:
          optionalOfAlias: optional<IntegerAlias>
          optionalAlias: OptionalAlias
          listAlias: ListAlias
          setAlias: SetAlias
          mapAlias: MapAlias
          objectAlias: ObjectAlias
          optionalOfObjectAlias: optional<ObjectAlias>
          unionAlias: UnionAlias
          optionalOfUnionAlias: optional<UnionAlias>
          optionalObjectAlias: OptionalObjectAlias
      OptionalConstructorFields:
        fields:
          list: optional<list<integer>>
          string: optional<string>
          integer: optional<integer>
      OptionalConstructorFields2:
        fields:
          object: optional<TestObject>
      SuperpackageObject:
        fields:
          sub: SubpackageObject
      SubpackageObject:
        package: com.palantir.conjure.foo
        fields:
          foo: IntegerAlias
      OtherSubpackageObject:
        package: com.palantir.conjure.bar.baz
        fields:
          foo: SubpackageObject
      OtherSubpackageCollections:
        fields:
          list: list<OtherSubpackageObject>
          set: set<OtherSubpackageObject>
          map: map<integer, SubpackageObject>
      CustomValueHandling:
        fields:
          binary: binary
          double: double
      OptionalBinaryField:
        fields:
          binary: optional<binary>
      AllRequiredFields:
        fields:
          integer: integer
          double: double
          string: string
      AllOptionalFields:
        fields:
          optionalString: optional<string>
          map: map<string, string>
          list: list<string>
          set: set<string>
      MixedFields:
        fields:
          integer: integer
          map: map<string, string>
          string: string
      EmptyObject:
        fields: {}
      DoubleKeys:
        fields:
          doubleMap: map<double, integer>
          doubleSet: set<double>
          aliasMap: map<DoubleAlias, integer>
          aliasSet: set<DoubleAlias>
          listSet: set<list<double>>
          setSet: set<set<double>>
      WrappedDoubles:
        fields:
          optional: optional<double>
          list: list<double>
      BooleanKeys:
        fields:
          booleanMap: map<boolean, integer>
          booleanSet: set<boolean>
          aliasMap: map<BooleanAlias, integer>
          aliasSet: set<BooleanAlias>
      NestedMap:
        fields:
          maps: map<string, map<string, string>>
      SetOfObjectsWithDoubles:
        fields:
          set: set<AllRequiredFields>
      MapDoubleValues:
        fields:
          raw: map<string, double>
          optional: map<string, optional<double>>
          list: map<string, list<double>>
    errors:
      SimpleError:
        namespace: Test
        code: INTERNAL
        safe-args:
          foo: string
          bar: integer
          baz: EmptyObject
        unsafe-args:
          unsafeFoo: boolean

services:
  TinyService:
    name: Tiny Service
    package: com.palantir.conjure
    base-path: /tiny
    endpoints:
      foo:
        http: POST /foo
        args:
          body: binary
        returns: binary

  TestService:
    name: Test Service
    package: com.palantir.conjure
    base-path: /test
    endpoints:
      queryParams:
        http: GET /queryParams
        args:
          normal:
            type: string
            param-type: query
          optional:
            type: optional<integer>
            param-type: query
            param-id: custom
          list:
            type: list<integer>
            param-type: query
          set:
            type: set<boolean>
            param-type: query
      aliasQueryParams:
        http: GET /aliasQueryParams
        args:
          optional:
            type: OptionalAliasAlias
            param-type: query
          list:
            type: ListAliasAlias
            param-type: query
          set:
            type: SetAliasAlias
            param-type: query
      pathParams:
        http: GET /pathParams/{foo}/{bar}/raw/{baz}
        args:
          foo: string
          bar: boolean
          baz: rid
      headers:
        http: GET /headers
        args:
          foo:
            type: string
            param-type: header
            param-id: Some-Custom-Header
          bar:
            type: optional<integer>
            param-type: header
            param-id: Some-Optional-Header
      aliasHeaders:
        http: GET /aliasHeaders
        args:
          bar:
            type: OptionalAliasAlias
            param-type: header
            param-id: Some-Optional-Header
      emptyRequest:
        http: POST /emptyRequest
      jsonRequest:
        http: POST /jsonRequest
        args:
          body: string
      optionalJsonRequest:
        http: POST /optionalJsonRequest
        args:
          body: optional<string>
      optionalAliasRequest:
        http: POST /optionalAliasRequest
        args:
          body: OptionalAlias
      streamingRequest:
        http: POST /streamingRequest
        args:
          body: binary
      streamingAliasRequest:
        http: POST /streamingAliasRequest
        args:
          body: BinaryAlias
      jsonResponse:
        http: GET /jsonResponse
        returns: string
      optionalJsonResponse:
        http: GET /optionalJsonResponse
        returns: optional<string>
      listJsonResponse:
        http: GET /listJsonResponse
        returns: list<string>
      setJsonResponse:
        http: GET /setJsonResponse
        returns: set<string>
      mapJsonResponse:
        http: GET /mapJsonResponse
        returns: map<string, string>
      streamingResponse:
        http: GET /streamingResponse
        returns: binary
      optionalStreamingResponse:
        http: GET /optionalStreamingResponse
        returns: optional<binary>
      streamingAliasResponse:
        http: GET /streamingAliasResponse
        returns: BinaryAlias
      optionalStreamingAliasResponse:
        http: GET /optionalStreamingAliasResponse
        returns: optional<BinaryAlias>
      headerAuth:
        http: GET /headerAuth
        auth: header
      cookieAuth:
        http: GET /cookieAuth
        auth: cookie:foobar
      safeParams:
        http: GET /safeParams/{safePath}/{unsafePath}
        args:
          safePath:
            type: string
            markers:
              - Safe
          unsafePath: string
          safeQuery:
            type: string
            param-type: query
            param-id: safeQueryId
            safety: safe
          unsafeQuery:
            type: string
            param-type: query
            param-id: unsafeQueryId
          safeHeader:
            type: SafeStringAlias
            param-type: header
            param-id: Safe-Header
          unsafeHeader:
            type: UnsafeStringAlias
            param-type: header
            param-id: Unsafe-Header
      deprecated:
        http: GET /deprecated
        deprecated: Don't use this!
      context:
        http: GET /context
        tags:
          - server-request-context
        args:
          arg:
            type: optional<string>
            param-type: query
      contextNoArgs:
        http: GET /contextNoArgs
        tags:
          - server-request-context
