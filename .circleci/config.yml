version: 2.1

orbs:
  win: circleci/windows@5.0.0

executors:
  rust:
    docker: [{ image: rust:1.75.0 }]

commands:
  restore_target:
    parameters:
      job:
        type: string
    steps:
      - run: rustc --version > ~/rust-version
      - restore_cache: { key: '<< parameters.job >>-target-{{ checksum "Cargo.lock" }}-{{ checksum "~/rust-version" }}' }
  save_target:
    parameters:
      job:
        type: string
    steps:
      - run: rustc --version > ~/rust-version
      - save_cache:
          key: << parameters.job >>-target-{{ checksum "Cargo.lock" }}-{{ checksum "~/rust-version" }}
          paths: [target]

jobs:
  checkout:
    executor: rust
    steps:
      - checkout
      - restore_cache: { key: registry }
      - run: cargo generate-lockfile
      - restore_cache: { key: 'deps-{{ checksum "Cargo.lock" }}' }
      - run: cargo fetch
      - save_cache:
          key: registry-{{ .BuildNum }}
          paths: [/usr/local/cargo/registry/index]
      - save_cache:
          key: deps-{{ checksum "Cargo.lock" }}
          paths:
            - /usr/local/cargo/registry/cache
            - /usr/local/cargo/registry/src
      - persist_to_workspace:
          root: /
          paths:
            - root/project
            - usr/local/cargo/registry

  circle-all:
    executor: rust
    environment:
      RUSTFLAGS: -D warnings
    steps:
      - attach_workspace: { at: / }
      - run: rustup component add clippy rustfmt
      - restore_target: { job: test }
      - run: cargo clippy --all --all-targets
      - run: cargo fmt --all -- --check
      - run: cargo test --all --all-features
      - run: |
          ./regenerate.sh
          if [[ -n "$(git status --porcelain)" ]]; then
            git status
            exit 1
          fi
      - save_target: { job: test }

  dist-linux:
    executor: rust
    steps:
      - attach_workspace: { at: / }
      - run: apt-get update
      - run: apt-get install -y musl-tools
      - run: rustup target add x86_64-unknown-linux-musl
      - restore_target: { job: dist-linux }
      - run: cargo build --release --target x86_64-unknown-linux-musl -p conjure-rust
      - run: strip target/x86_64-unknown-linux-musl/release/conjure-rust
      - save_target: { job: dist-linux }
      - persist_to_workspace:
          root: /
          paths: root/project/target/x86_64-unknown-linux-musl/release/conjure-rust

  dist-macos:
    macos:
      xcode: 12.5.1
    environment:
      RUSTUP_HOME: /Users/distiller/usr/local/rustup
      CARGO_HOME: /Users/distiller/usr/local/cargo
    working_directory: /Users/distiller/root/project
    steps:
      - attach_workspace: { at: /Users/distiller }
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --default-toolchain 1.75.0
      - run: sudo ln -s $CARGO_HOME/bin/* /usr/local/bin
      - run: rustup target add aarch64-apple-darwin
      - restore_target: { job: dist-macos }
      - run: cargo build --release --target x86_64-apple-darwin -p conjure-rust
      - run: strip target/x86_64-apple-darwin/release/conjure-rust
      - run: cargo build --release --target aarch64-apple-darwin -p conjure-rust
      - run: strip target/aarch64-apple-darwin/release/conjure-rust
      - save_target: { job: dist-macos }
      - persist_to_workspace:
          root: /Users/distiller
          paths:
            - root/project/target/x86_64-apple-darwin/release/conjure-rust
            - root/project/target/aarch64-apple-darwin/release/conjure-rust

  dist-windows:
    executor: win/default
    working_directory: C:\Users\circleci\root\project
    steps:
      - attach_workspace: { at: C:\Users\circleci }
      - run: choco uninstall rust
      - run: choco install -y rustup.install
      - run: rustup default 1.75.0
      - run: cargo build --release --target x86_64-pc-windows-msvc -p conjure-rust
      - persist_to_workspace:
          root: C:\Users\circleci
          paths: root\project\target\x86_64-pc-windows-msvc\release\conjure-rust.exe

  publish:
    docker: [{ image: openjdk:11 }]
    steps:
      - attach_workspace: { at: / }
      - run: ./gradlew publish
      - store_artifacts:
          path: build/distributions

workflows:
  version: 2
  main:
    jobs:
      - checkout:
          filters: { tags: { only: /.*/ } }
      - circle-all:
          requires: [checkout]
          filters: { tags: { only: /.*/ } }
      - dist-linux:
          requires: [circle-all]
          filters:
            tags: { only: /.*/ }
            branches: { only: master }
      - dist-macos:
          requires: [circle-all]
          filters:
            tags: { only: /.*/ }
            branches: { only: master }
      - dist-windows:
          requires: [circle-all]
          filters:
            tags: { only: /.*/ }
            branches: { only: master }
      - publish:
          requires: [circle-all, dist-linux, dist-macos, dist-windows]
          filters:
            tags: { only: /.*/ }
            branches: { only: master }
